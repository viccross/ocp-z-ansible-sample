---
# tasks file for create-cluster

- name: grab the pull secret
  stat:
    path: "/var/www/html/.secret/.ocp4_pull_secret"
  register: ps
- name: abort if the pull secret is not present
  fail:
    msg: "OCP pull secret is not found!"
  when: ps.stat.size == 0

- name: remove prior openshift workdir
  file:
    path: "~/ocp4-workdir"
    state: absent

- name: create openshift workdir
  file:
    path: "~/ocp4-workdir"
    state: "directory"
    mode: 0755

- name: copy the ZNETBOOT config files to CMS
  block:
  - name: unmount the CMSFS
    command:
      cmd: fusermount -u /mnt/znetboot
# the DASD has to be cycled to pick up new link mode :/
  - name: vary the DASD offline
    command:
      cmd: chccwdev -d 191
  - name: link the DASD in write mode
    command:
      cmd: vmcp link LNXMAINT 200 191 mr
  - name: vary the DASD online
    command:
      cmd: chccwdev -e 191
  - name: pause for udev/systemd
    pause:
      seconds: 3
# Can't use Ansible copy module due to CMSFS semantics
# (and stubbornness of Ansible)
  - name: copy the files
    shell:
      cmd: "rm -f /mnt/znetboot/OCP*.ZNETBOOT && cp /var/www/html/bootfiles/*.znetboot /mnt/znetboot/"
  - name: unmount the CMSFS
    command:
      cmd: fusermount -u /mnt/znetboot
# the DASD has to be cycled to pick up new link mode :/
  - name: vary the DASD offline
    command:
      cmd: chccwdev -d 191
  - name: link the DASD in read mode
    command:
      cmd: vmcp link LNXMAINT 200 191 rr
  - name: vary the DASD online
    command:
      cmd: chccwdev -e 191

# install config is deleted when ignition
# configs are created.  this task also
# creates a copy to check for debugging
- name: generate install-config.yaml
  tags: config
  template:
    dest: "~/ocp4-workdir/{{ item }}"
    src: install-config.yaml.j2
    mode: 0644
  with_items:
  - install-config.yaml
  - install-config.copy.yaml

- name: create ignition configs
  tags: config
  shell: "openshift-install --dir=`pwd` create ignition-configs"
  args:
    chdir: "~/ocp4-workdir"
    creates: "~/ocp4-workdir/metadata.json"

- name: create additional config mods in ignition
  block:
  - name: back up the ignition files
    tags: config
    shell: ls ~/ocp4-workdir/*.ign
    register: ign_raw
  - name: back up ignition configs
    tags: config
    copy:
      src: "{{ item }}"
      dest: "{{ item }}.bak"
      remote_src: yes
      mode: 0644
    with_items: "{{ ign_raw.stdout_lines }}"
  - name: create bootstrap directory
    file:
      path: "~/ocp4-workdir/bootstrap/etc"
      state: directory
      mode: 0755
  - name: create our chrony.conf file
    template:
      dest: "~/ocp4-workdir/bootstrap/etc/chrony.conf"
      src: chrony.conf.j2
      mode: 0644
  - name: filetranspile the ignition files
    command: filetranspile -i {{ item }}.bak -f bootstrap -o {{ item }}
    args:
      chdir: "~/ocp4-workdir"
    with_items: "{{ ign_raw.stdout_lines }}"
#  - name: create ignition manifests
#    tags: config
#    shell: "openshift-install --dir=`pwd` create manifests"
#    args:
#      chdir: "~/ocp4-workdir"
#      creates: "~/ocp4-workdir/manifests"
#  - name: create manifest files for chrony config
#    template:
#      dest: "~/ocp4-workdir/manifests/99_{{ item }}-chrony-configuration.yaml"
#      src: chrony-manifest.yaml.j2
#      mode: 0644
#    loop:
#      - "master"
#      - "worker"
#  - name: copy/recover the install-config.yaml
#    copy:
#      src: "~/ocp4-workdir/install-config.copy.yaml"
#      dest: "~/ocp4-workdir/install-config.yaml"
#      mode: 0644
#  - name: re-create ignition configs
#    tags: config
#    shell: "openshift-install --dir=`pwd` create ignition-configs"
#    args:
#      chdir: "~/ocp4-workdir"

- block:
  - name: make ignition config directory
    file:
      path: /var/www/html/ignition
      state: directory
      mode: 0755
  - name: get ign files
    tags: config
    shell: ls ~/ocp4-workdir/*.ign
    register: ign_raw
  - name: copy ignition configs to /var/www/html/ignition
    tags: config
    copy:
      src: "{{ item }}"
      dest: "/var/www/html/ignition/"
      remote_src: yes
      mode: 0644
    with_items: "{{ ign_raw.stdout_lines }}"

- name: install kubeconfig
  tags: wait-install
  copy:
    src: "~/ocp4-workdir/auth/kubeconfig"
    dest: "~/.kube/config"
    remote_src: yes
    force: yes
    mode: 0640

- name: create /etc/hosts entry
  tags: etc-hosts
  connection: local
  copy:
    dest: "{{ playbook_dir }}/../etc.hosts"
    mode: 0644
    content: >
      9.60.86.74
      bastion.ocp-z-poc.wsc.ibm
      api.ocp-z-poc.wsc.ibm
      console-openshift-console.apps.ocp-z-poc.wsc.ibm
      oauth-openshift.apps.ocp-z-poc.wsc.ibm

- name: boot the bootstrap node
  include_tasks: boot-guest.yml
  vars:
    coreos_role: bootstrap
  with_items: "{{ cluster_nodes[coreos_role] }}"

- name: boot the master nodes
  include_tasks: boot-guest.yml
  vars:
    coreos_role: masters
  with_items: "{{ cluster_nodes[coreos_role] }}"

- name: boot the worker nodes
  include_tasks: boot-guest.yml
  vars:
    coreos_role: workers
  with_items: "{{ cluster_nodes[coreos_role] }}"
  when: cluster_nodes.workers is defined

- name: wait for bootstrap node accessibility
  wait_for:
    port: 22
    host: "{{ cluster_nodes['bootstrap'][item].ip }}"
    search_regex: OpenSSH
    delay: 1
    timeout: 10000
  with_items: "{{ cluster_nodes['bootstrap'] }}"

- name: wait for master node accessibility
  wait_for:
    port: 22
    host: "{{ cluster_nodes['masters'][item].ip }}"
    search_regex: OpenSSH
    delay: 1
    timeout: 5000
  with_items: "{{ cluster_nodes['masters'] }}"

- name: wait for bootstrap complete # noqa 301
  tags: config
  shell: openshift-install --dir=`pwd` wait-for bootstrap-complete --log-level debug
  args:
    chdir: "~/ocp4-workdir"
  register: result
  retries: 2
  delay: 0
  until: result is not failed

- name: shut down the bootstrap node # noqa 301
  shell: smcli id -T {{ cluster_nodes['bootstrap'][item].guest_name }} -t 'WITHIN 60' -H 172.24.26.10/44444 -U IBMAUTO -P jTghTGinJupD63yh
  with_items: "{{ cluster_nodes['bootstrap'] }}"

- name: give the bootstrap time to shut down
  pause:
    minutes: 1
  when: cluster_nodes.bootworker is defined

- name: rename the bootstrap node for conversion # noqa 301
  shell: smcli ichid -T {{ cluster_nodes["bootstrap"]['bootstrap-0']['guest_name'] }} -n {{ cluster_nodes["bootworker"]['worker-2']['guest_name'] }} -H 172.24.26.10/44444 -U IBMAUTO -P jTghTGinJupD63yh
  when: cluster_nodes.bootworker is defined

- name: make sure converted node can access the config disk
  shell:
    cmd: |
      ldapmodify -Zx -h LDAPSRV.ibmpoc.internal -p 389 -D racfid=IBMAUTO,profiletype=user,o=ibmzvm -w 'jTghTGinJupD63yh' <<EOFLDIF
      dn: profilename=LNXMAINT.200,profiletype=VMMDISK,o=ibmzvm
      changetype: modify
      add: racfaccesscontrol
      racfaccesscontrol: ID({{ cluster_nodes['bootworker'][item].guest_name }}) ACCESS(READ) COUNT(0)
      EOFLDIF
  with_items: "{{ cluster_nodes['bootworker'] }}"
  when: cluster_nodes.bootworker is defined

- name: boot the converted worker node
  include_tasks: boot-guest.yml
  vars:
    coreos_role: bootworker
  with_items: "{{ cluster_nodes[coreos_role] }}"
  when: cluster_nodes.bootworker is defined

- name: wait for worker node accessibility
  wait_for:
    port: 22
    host: "{{ cluster_nodes['workers'][item].ip }}"
    search_regex: OpenSSH
    delay: 1
    timeout: 5000
  with_items: "{{ cluster_nodes['workers'] }}"
  when: cluster_nodes.workers is defined

- name: start the approve-csrs task
  systemd:
    name: ocp-approve-csrs
    state: started

- name: wait for install complete # noqa 301
  tags: wait-install
  shell: openshift-install --dir=`pwd` wait-for install-complete
  args:
    chdir: "~/ocp4-workdir"
  register: result
  retries: 2
  delay: 0
  until: result is not failed

- name: update boot device on the master nodes
  include_tasks: guest-IPLdev.yml
  vars:
    coreos_role: masters
  with_items: "{{ cluster_nodes[coreos_role] }}"

- name: update boot device on the worker nodes
  include_tasks: guest-IPLdev.yml
  vars:
    coreos_role: workers
  with_items: "{{ cluster_nodes[coreos_role] }}"
  when: cluster_nodes.workers is defined

- name: update boot device on the converted bootstrap node
  include_tasks: guest-IPLdev.yml
  vars:
    coreos_role: bootworker
  with_items: "{{ cluster_nodes[coreos_role] }}"
  when: cluster_nodes.bootworker is defined

- name: configure the cluster (LDAP, ingress certificate)
  include_tasks: configure-cluster.yml

- name: enable the start-the-guests service
  systemd:
    name: ocp-guests-start
    state: stopped
    enabled: yes

- name: give the converted bootstrap node time to build
  pause:
    minutes: 10

- name: stop the approve-csrs task
  systemd:
    name: ocp-approve-csrs
    state: stopped
